#include <iostream>
#include <fstream>
#include <stdio.h>
#include <string>
#include <map>
#include <filesystem>
namespace fs = std::filesystem;
using namespace std;

long long polyhash(char* chunk) {
	long long k = 31, mod = 1e9 + 7;

	long long h = 0, m = 1;
    for (; *chunk != '\0'; chunk++) {
		h = (h + m * int(*chunk)) % mod;
		m = (m * k) % mod;
	}
	return h;
}

static long long GearHash[256] = { 
0b1000100101100110010010001010111100001011111110000110000111011000,
0b0101010010001000000100110101100010111110100100101001011110001110,
0b1001111110010000001010001100111011001000100010100011100010011000,
0b0001000000011001011010101100111010001101110101101101010100010100,
0b1100110000000101100000111101100100101100011100110000110011100000,
0b1101111010010000110110000101101000000111010110001111000101110100,
0b0010101100010101001101010100010100001000010110111101000001111011,
0b0111011110011011000111000010100100011010001000000001101111010101,
0b1110111001101111111010001011011011000001111001000110011010101110,
0b1001010001000010000000100111100001000100011010110000001001110001,
0b1100011111110000101011101000111001011111110000101100101011010001,
0b1100111111001100001001100011001100111101100001111010110011010100,
0b1100110111010001011001101010011111000110100111111101001001010101,
0b0101101100001000001111111010101111001100100101000101001101110100,
0b0100000011011010001000010111100101101111011101111101011111011110,
0b1001100001100101101010110111000110100111100011011110010101010010,
0b1001111010001000110110010000010110011000110111111110101010011011,
0b0100000101100111101111101000001111010001100100111110011101011010,
0b1000011110110001100000110101001111110010111011101011010011001100,
0b0000100100110111110011111011101111111011110010001111001111010000,
0b1001010100110001001011110100001100101101111100011011001101010101,
0b0000110010010011011101010111111110111111101111100101000000011111,
0b1101101100010010011000011111011100110011100111011000111110101110,
0b1100101000110001100100010001101000000011111110010110010000101010,
0b1111011101010011111011000010100010010111000011010110100000001101,
0b1111000010011111011001100010110101100001101000101101111010001111,
0b1111111111000011011001000011101110111111010011010101110011011001,
0b0001000001001001000101100110101010001011110111100001100110000000,
0b0111001000100011101100110011101111100110000010110011101101110100,
0b1110110010101010011100110001111000100101011111011111000011111001,
0b1001101010101100110100111010110110100011101111100010000100010111,
0b1101010111000101010111000100001110110100011001011011111001000100,
0b1100101101001001100001111010001001001101111010011011000101111000,
0b0011100011101010001101001010111010101001101011000010101101000111,
0b0011111100110011010001100101101010001001001101000001100010101001,
0b1101001110110101101010011100101001000011010111000011000010011101,
0b0111101101110000100101000101000001010100000010001011010111010101,
0b0111000100111011010010100000000110100111100011001000101101111011,
0b0100011100011101000111110000000101000101010110111010011001100000,
0b0100000000100110111101100001101110111001011100011010111100111100,
0b1000011010010110100101101001101110011010001100001011011101001010,
0b1101001010001111010010011111111010100101000011010110010110011111,
0b1100000010100101110011000111100001000010001110110011101110011000,
0b1001110011110001001000100000111101001111110010101010101000101011,
0b0000000110101001110101111100101010010010111011101000110000111100,
0b0110001110100110000100010100101100111101101001010111011010011110,
0b0100011111011100101100101111000010001101000110101010011001111100,
0b1110111100111011101101010110000011010001011011010111001111001110,
0b1100101010100111000011111010100001011100101011001100110011011000,
0b0111011111001110101111010110011010111111010100111001101010011010,
0b1101011011101100110101110011000001100100011100011001000000100101,
0b0001111100011111001111110000001010100110100001101100001111000110,
0b0110100001000000110011100100011010110101101010100111000001000100,
0b0111110010000110111101010000111010101011110000000010000010010111,
0b1010101110011001000110010010011111101111001011111110011001101101,
0b0101111110011101001100001000010011010111110110111000010110001010,
0b1101110000110010100000011110010110000001100110011110010110010011,
0b0011101110011001110110100010101000111101100110001010000000110100,
0b0111110010010011110001001000111101100110101111101110011110101110,
0b1001001000000010001010101000110100101001110110110011101000001100,
0b1011011000111001011110010011000110000111110101001100111110110101,
0b1101101100110010110110101011010100100111111110101101100011000010,
0b0100100000101111100101000111100001010101101110110011011010001101,
0b1110110110100100100010111111100011110111110011101010000110000011,
0b0111101001110011110100001110111110110011000000101010100011100101,
0b0010101010001001011101000001001011110110111110000101001100110100,
0b0101110111011011111111011000011001011100100111110111011100111010,
0b1111010011010111011001101110011101010011101101011010011010001110,
0b1100101111101110100101000000111110001100001001100100010011011110,
0b1101101111101110011101010110100100011010010101001010110011011010,
0b0011010101000000100000011111011110101101011101101001010111011010,
0b0111000010011111011001011100010010101011100001010010110001000010,
0b1000011100100100010101101100011100100111011000101111011111101000,
0b1100001011101111101101100001101101110000111011001101011111110101,
0b0011111001110001011000001100110000110001010000001001001111000000,
0b0100001001100101100001100110110001110100110001010100001001010111,
0b1100110001000111101000100100111101011000000101001000110101110100,
0b0011010100011110001101110111010000011111111111111010001101001000,
0b1011010001001001101100101001100110110111000011000111100100001111,
0b0100010100000001111100010001111111011100010111111100011110100001,
0b0111100111011110010100100101011001010010111100011001001101100100,
0b0010101001001010011111010101110011001011001011111101011100101110,
0b1011001010101000100101110100010010000011001010010101111101100101,
0b0101001000101011001111110111001110010000001000000001110000000100,
0b0100111110100001010100010111001011111010000000010000000111000111,
0b0100100010001111010001001001111010010110100001001011110001010010,
0b1111110001100111110111011000101011010001110010110001000101001101,
0b1011110000010110100011101100011001010100000001100101001000001101,
0b0101000101010110101011100110011000100110111011111101010110100111,
0b0100111100111110101111111011001001101011010100001111110101001101,
0b1101001010000110011100001101010000110100101100011001001100001011,
0b0101110010000111010010110011010000101100110001011111001010100110,
0b0011110100010111100100101000111111101100010100001100001001001011,
0b0101101010101110010000010010101100010110111001101111000000110001,
0b1111001000110110110000110101011110101110001011000110000101010110,
0b0000101110010010100010010110100110100111110011110010100011111111,
0b1010110011101100001110011101100001010000111000100100010111000001,
0b0011100001001110010100001111001010100000110111010001100000100011,
0b1010110100101111011000010010100111101110011101101100111100011111,
0b0001101100101000011010010100111101010001101111000011000000100100,
0b0001010001011001100111100000001011100011111000111111001111011010,
0b0000011111011101011111100111111111101111100100111001011011001110,
0b0011000011001110001011011010100010011000111111101111001110101001,
0b0010111000111100001111001100110011011101100000100111010101101000,
0b1001010101110110110111101100100001011001101000000001100000001011,
0b1010100010010101011110111100100111001101100110001011111111100111,
0b1011000111001000011000100101101111001111111111110001111010000100,
0b0111111110110010001000110101111100001001101111011000011101010100,
0b1100110111010001001010011100000010101100011100100111010100000000,
0b1100100011011111000011111010110000101001010010001110101110001110,
0b1110011111110000111101010110000010100011101110111111100100010110,
0b1011101101000101101010001100111000111000010011110110111100001001,
0b0111111001100011001101001001011110101100000011100111011111011101,
0b1111110110110011011000000001111100101101101010000000011100100110,
0b1011100010010011011101000101011100011001101110010001110011001010,
0b1010011011110001110010000011110101111011010110010100100010100001,
0b1010100010001110000101110110010000010000010011000110100110111010,
0b1010111100010001111100010110101010101000000111011110001011011011,
0b0101000100110011110001110011100110010000011011101110001001010000,
0b1101011010001100001101111001100000111101110010110000111010110010,
0b0100100000111000000100010000110001100001001011000011100001110100,
0b1110011000000000100000001110000101000110011101011101110000110100,
0b1111111111000101001100100101101101010101110101010111000011000100,
0b1000001110100100001010110111011000000010011100011111111011101011,
0b1111100000101110001100010110001000101111100010010101101011000101,
0b0110000010100111001100010100011101010010000010111001110000000000,
0b0001101100000000010100100011011101000110110100100000111001011110,
0b0011111000011101010110101000110110101011111101000111000111100010,
0b1100011111110101100001000011010101010110110001001111000001001101,
0b1010100010101101110000000000010101011111001111100011010111000000,
0b0111101110001010010101100010110010101000010100101011011010001100,
0b0100100101110100010001000111100011110111111001111101100011100011,
0b0110001001000110101000101000101001100011100010100001010111100101,
0b1110101010110000100101010100101011010001011110000101010000111011,
0b1001111011011111001101111100101100100111101011011001010001100000,
0b0010110110110111111000111110101000111110100110100011100010011001,
0b0011111011111010000101001111010111101011011000011010100110111000,
0b0100110100001010100100111110001011111110110011110111110111111011,
0b0100011010010001101001111010011000100000001101011101111101000010,
0b0000111000111110011111001111011101001111011111110011111100010110,
0b1101111100100000001001100101010010011101110100000010010100000111,
0b1001010001001111010110000010101111011111011001011010011011001011,
0b1010110101001011110011011110000111110010011100010101011110110101,
0b1011010011110101111011011110000010001011110000000010010100001000,
0b1010110001101011110001100001011001000000110100110110001101001110,
0b1000111010001011100010011110001000101110100001011111011101100101,
0b1110001011111100001000101101111101001100110100111010011001000111,
0b0001111111001110110001001010011010001110011000100001001010000000,
0b0111001001011110000000001100100111001110001010111001000111001001,
0b0101000001100110000111010101010100000110100000111011100001001011,
0b0010100111000010101000010100101101010100111011111010111011010000,
0b0011101000111110101011001010011000101010101101011000101101000000,
0b0100111011001100011111010101011001100110001111110100110100000101,
0b0011110000010010000111000101110111110101100111100111000011101111,
0b0001100100010101110010010001100001111110001011110101100000110000,
0b1000111010100100100110101001110110011100111110101010011011000001,
0b1010010111101011111011111110011000110100111001001111101000001110,
0b0100111000101000110101011011000011000110100110100011010011100101,
0b1000010101001011100000101110100100111000010011110100111111100011,
0b1101001111010100011111010011010000111110011101101110110101011011,
0b1100000011101000111101101000001110000000011100010111011111110010,
0b0001100001100100000000011001101001001001001011110110110000000100,
0b1000101110100111111010011100000111111001000011010011001100010011,
0b0011111010101011011011110010011101110110010110001011000010011111,
0b1101000001000000010100010110110110000000111100100011011100110011,
0b0000011100110010111110100011101111101101000110111010001011100011,
0b0010101100100110110001111110010011100101110011100111010000110000,
0b1111100110110011011000101011100111010000100011001000110011110100,
0b1010011110011010101110101101111101001011000110011101000011001011,
0b1001110010110100001011000011100001011011110010011100110100011110,
0b1101111000110000100111101000111001110000100011000010001000100010,
0b0111000000101101101010001111101010010000110110100111101010001101,
0b0101101011010010111001111111010100100000010011110001101111001001,
0b1001101110110011010000100111000101111001100110101000110111001010,
0b1100000011110101010110110011011111100010010000100101110011000000,
0b0001111000000110010000111100010011100001001111010001100110011111,
0b0000001010001101001110011001010000110011001101110111100011000011,
0b0000100011010010100010011000101101011100100011000101111000101101,
0b1010111100011101100001010010000110101110001100110110111111111111,
0b1010011101001000101010011001000110001011101000110011110111011100,
0b0111111101101010010000011011001010101111001000001100011100010010,
0b0011011110000110110011101100011110100101011010101000110111000011,
0b1101110101100110001111011110110001000110101111111111010011101111,
0b1110011100011010111101011100010011101000101110011011000000001111,
0b1101111111010101101101000011110101000101001010000011101001001001,
0b0101011101000111100100110111100011001000001000100110001010010000,
0b0010010100010100111111100110011110011100011000110101101100001111,
0b0111001111010000001011010110010011100000101100110010011001110101,
0b1010111000101111100101100111011010001010111001011000100101010100,
0b1100000111001100011101000010001100011100111010110101100111100100,
0b0000111001101110111000001100011010111011011010001100010101111100,
0b1011100100001111000001000100011001110011010000001010111100101011,
0b1011000111000111011100101100110001100101100001001001001101110110,
0b1000100110101001001111100001011001011111011101110001010000011001,
0b1011100101010001101111001001100100110000110001010110101101001010,
0b0110111001100010010110000010010001111010000111011111010011000000,
0b1111001000010110010011011011010000101001100001010001111111101101,
0b0101000111111111001010001010001111101111110001010100011111101101,
0b1111110110101010011110010110101000110101110010000001101110011101,
0b0111011111100110110000111100010101000110011110110111110011011000,
0b0101001011011000100010011110110000101000001011111001001010000011,
0b0000000110100101111100001100101000110010010101011011000100111110,
0b1011111000000111000001110010001000011111111011110101101000001100,
0b1110011001100010111110010011110000110011110111001100000100111100,
0b0000011001100100101101010010010001001001111011100110101110011101,
0b0000111010111000011111110101001001010000110010100011000010100101,
0b1001110001110001110111000010110001101101110011110111011110100101,
0b1101100110101100101000011101001110001111000010000111101100110000,
0b0011000010000010001100010101010001000010111110111100101100010100,
0b1111011001001000101010000011011000011001000011101011110010111011,
0b1010101001110011111000011110100100100000101011011101100110110111,
0b1010011011111111100000111010000110011110100000101111001100010110,
0b0111111101001100101110111100000001001101000101011111111111111101,
0b0101010100000010110000101100111010101101110010011101011000110100,
0b0011101111010001010100110100111001000001011100110000000001101110,
0b0110010010100110011010110101101111000001001111101110111111110101,
0b0110001011010101000100110100111011111110110011001101001110001111,
0b1000010011010110011110100001101011111110001011110111100001001101,
0b0000001011110000010101100000000010111001000011001011011100101110,
0b1100100010011101101000001011000110000111100111010000000101011000,
0b1111101110011000000110001101111101000000010101010011001001011010,
0b0000100011100100011111111010100111111000110010100101111001101100,
0b1000111101001001101110101110001000110010001001101111000001100001,
0b0101101000010101111010001101110000000111010110011000000111010000,
0b0001101001001010001101001111010111100001010111101111010111001101,
0b0101001101001111100100000000001011111000100100000010100011110101,
0b0010100111001100011100000110110100100010000100100110101010010110,
0b1111000111110000111101000110011110110000011110011100111100010001,
0b1001010001011100111000110010000000110001011011011111010110101100,
0b0110000110110010001010101110011111000101011001010110100000101100,
0b1100001011111110110000011101100011010100001100010111010001111000,
0b0001010101011101101000110110000011101110010000101010000111100001,
0b0101110101100111011000010011011010000000110000111101010111010001,
0b1001101101111001000110011100000101010010101001011001110101100000,
0b1011001111011000010000111000001101000010000110000000001100001011,
0b0000000111010010110011010111100110110110011011001001000101100100,
0b0010001010001100001011000000101111010011001100001110111101110100,
0b0110100100101101100010111110010111011010110111111111010111000010,
0b0100101001010010101111110001110010001100010001001111001001010101,
0b1000001111111001110110000001110101011101011000100010010110110001,
0b0000100001110111100100011011010111100101110001001111011000001101,
0b1001010110010100010001100011110110000001001101010100001001001001,
0b1101110000010100110101000000101000110111111000110000010001011000,
0b0010011000100011101110000100011111111110100110101010111010110001,
0b0111111101001101001110011011110101101101011011001011110001001101,
0b1110010110110011001111111001011101011000101101101011101011111011,
0b0010101111010110011011101011111100100100010010010110001010101101,
0b0110110110110111000010011000000010001110100001100110100010101010,
0b1101011011101000100010110110001001011111010000000100100100000110,
0b1010000010001110010110101010011100111101011110100111100010011110,
0b0000110100100111110000000101001001100000000010101010100100011011,
0b0111000111011111000101000100110000101011000110000110000001101000,
0b0000101000111001010010100111000010110101101001101000101110111001,
0b0100011110011111000111001011001100010000001101001000110011001100,
0b1111111101011111111010110001101010100110011100101110010010011011,
0b0001010000010001001100001000101001000000111011110000000111100101 };

unsigned long long gearhash(unsigned long long prev, char byte) {
    return (prev << 1) + GearHash[(int) byte];
}

bool isChunkBoundary(unsigned long long cur, unsigned long long mask) {
    return (cur & mask) == 0;
}



int main()
{

    string hashStorageDir = "D:\Projects\VisualStudio\HashStorage";
    string fileStorageDir = "D:\Projects\VisualStudio\FileStorage";
    string testStorageDir = R"(D:\Projects\VisualStudio\TestStorage)";
    long long chunkSize = 8096;
    long long fingerprintLength = 8;
    unsigned long long mask = 0b1111111111111000000000000000000000000000000000000000000000000000;
    unsigned long long mask_d = 0b1001000100010001000100010001000100010001000100000000000000000000;
    unsigned long long mask_s = 0b1001000100010001000100010001000100010001000100010001000000000000;
    unsigned long long mask_l = 0b1001000100010001000100010001000100010000000000000000000000000000;
    long long cutOffPoint = 500;

    map<long long, string> hashStorage;
    map<string, string> fileStorage;

    int mode = 3;


    long long testStorageSize = 0;
    long long fileStorageSize = 0;
    for (const auto& entry : fs::directory_iterator(testStorageDir)) {
        fstream file(entry.path().string(), ios::binary | ios::in);
        if (file.is_open()) {

            string fileHash = "";
            
            switch (mode)
            {
                case 1:
                {
                    char* chunk = new char[chunkSize + 1];
                    chunk[chunkSize] = '\0';

                    while (!file.eof())
                    {
                        file.read((char*)chunk, chunkSize);
                        long long chunkHash = polyhash(chunk);
                        hashStorage[chunkHash] = chunk;


                        char* bytes = (char*)&chunkHash;
                        for (size_t i = 0; i < fingerprintLength; i++)
                        {
                            fileHash += bytes[i];
                        }

                    }

                    delete[] chunk;
                    break;
                }
                case 2:
                {
                    unsigned long long hash = 0;
                    string contextChunk = "";
                    while (!file.eof())
                    {
                        char c;
                        file >> c;
                        contextChunk += c;

                        hash = gearhash(hash, c);

                        if (isChunkBoundary(hash, mask)) {
                            hashStorage[hash] = contextChunk;
                            contextChunk = "";

                            char* bytes = (char*)&hash;
                            for (size_t i = 0; i < fingerprintLength; i++)
                            {
                                fileHash += bytes[i];
                            }
                        }

                    }
                    break;
                }
                case 3:
                {
                    unsigned long long hash = 0;
                    string contextChunk = "";
                    while (!file.eof())
                    {
                        char c;
                        file >> c;
                        contextChunk += c;

                        hash = gearhash(hash, c);


                        unsigned long long curMask = (contextChunk.size() > chunkSize ? mask_l : mask_s);


                        if (contextChunk.size() > cutOffPoint && isChunkBoundary(hash, curMask)) {
                            hashStorage[hash] = contextChunk;
                            contextChunk = "";

                            char* bytes = (char*)&hash;
                            for (size_t i = 0; i < fingerprintLength; i++)
                            {
                                fileHash += bytes[i];
                            }
                        }

                    }
                }
                default:
                    break;
            }
               

            fileStorage[entry.path().string()] = fileHash;
            fileStorageSize += entry.path().string().size() + fileHash.size();

        }
        file.close();
        
        testStorageSize += entry.file_size();

    }

    //храниться в бинарном файле в формате "ключзначение"
    cout << "hashStorageSize " << hashStorage.size() * (chunkSize + fingerprintLength) << '\n';

    //храниться в бинарном файле в формате "ключзначение"
    //длина пути файла и длина максимального чанка
    cout << "fileStorageSize " << fileStorageSize + fileStorage.size() * (1 + 8)<< '\n';

    cout << "testStorageSize " << testStorageSize << '\n';
    
    cout << "deduplication benefit " << testStorageSize - hashStorage.size() * (chunkSize + fingerprintLength) - fileStorageSize - fileStorage.size() * (1 + 8);
}
